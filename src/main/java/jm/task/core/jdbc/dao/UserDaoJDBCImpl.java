package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import static jm.task.core.jdbc.util.Util.*;

public class UserDaoJDBCImpl implements UserDao {
    static Logger logger = Logger.getLogger(UserDaoJDBCImpl.class.getName());
    public UserDaoJDBCImpl(Util util) { }
    @Override
    public void createUsersTable() {
        String crTabQuery =
                "CREATE TABLE IF NOT EXISTS userTable" + """
                        (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         name VARCHAR(255),
                         lastname VARCHAR(255),
                         age SMALLINT)""";
        try (Statement statement = Util.connOpen().createStatement()) {
            statement.executeUpdate(crTabQuery);
            logger.log(Level.INFO,"Table has created!");
        } catch (SQLException e) {
            logger.log(Level.INFO,"Table already exists");
        }
    }
    @Override
    public void dropUsersTable() {
        String drTabQuery = "DROP TABLE IF EXISTS userTable";
        try (Statement statement = Util.connOpen().createStatement()) {

            statement.executeUpdate(drTabQuery);
            logger.log(Level.INFO,"Table has deleted!");

        } catch (SQLException e) {
            logger.log(Level.SEVERE,"ERROR: Table has no deleted!!");
        }
    }
    @Override
    public void saveUser(String name, String lastName, byte age) {
        String insQuery = "INSERT INTO userTable(name, lastname, age) VALUES (?, ?, ?)";
        try (PreparedStatement preparedStatement = Util.connOpen().prepareStatement(insQuery)) {

            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.executeUpdate();
            System.out.printf("User с именем %s добавлен в таблицу\n", name);

        } catch (SQLException e) {
            logger.log(Level.SEVERE,"ERROR: User " + name +" has no added to the table!");
        }

    }
    @Override
    public void removeUserById(long id) {
        String delQuery = "DELETE FROM userTable WHERE id = ?";
        try (PreparedStatement preparedStatement = Util.connOpen().prepareStatement(delQuery)) {

            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
            logger.log(Level.INFO,"Removing user with ID: " + id);

        } catch (SQLException e) {
            logger.log(Level.SEVERE,"ERROR: User with ID: " + id + " has NOT remove from table");
        }

    }
    @Override
    public List<User> getAllUsers() {
        List<User> list = new ArrayList<>();
        String selQuery = "SELECT * FROM userTable";
        try (Statement statement = Util.connOpen().createStatement()) {

            ResultSet resultSet = statement.executeQuery(selQuery);
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getLong("id"));
                user.setName(resultSet.getString("name"));
                user.setLastName(resultSet.getString("lastname"));
                user.setAge(resultSet.getByte("age"));
                list.add(user);

            }
        } catch (SQLException e) {
            logger.log(Level.SEVERE,"ERROR: Users not found!");
        }
        return list;

    }
    @Override
    public void cleanUsersTable() {
        String trQuery= "TRUNCATE TABLE userTable";
        try (PreparedStatement statement = Util.connOpen().prepareStatement(trQuery)) {

            statement.executeUpdate();
            logger.log(Level.INFO,"Table has cleaned!");

        } catch (SQLException e) {
            logger.log(Level.SEVERE,"ERROR: Table has not cleaned!");
        }

    }
}
